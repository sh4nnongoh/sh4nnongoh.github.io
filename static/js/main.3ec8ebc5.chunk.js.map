{"version":3,"sources":["logo.svg","Examples/Geolocation/Geolocation.jsx","Examples/Examples.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Geolocation","useState","popUpText","center","state","setState","Button","onClick","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","error","message","enableHighAccuracy","timeout","maximumAge","data-testid","Map","zoom","TileLayer","attribution","url","Marker","Popup","Examples","activeItem","setActiveItem","handleItemClick","e","name","Menu","attached","tabular","Item","active","Segment","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,kC,qYCWpCC,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CAC1BC,kBACAC,YACAC,gBAGF,IAsCeC,EAtCK,WAAO,IAAD,EACEC,mBAAS,CACjCC,UAAW,8CACXC,OAAQ,CAAC,UAAW,eAHE,mBACjBC,EADiB,KACVC,EADU,KAoBxB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,QAhBQ,WAClBC,UAAUC,YAAYC,oBACpB,SAAAC,GACEC,QAAQC,IAAIF,GACZN,EAAS,CACPH,UAAU,aAAD,OAAeS,EAASG,OAAOC,SAA/B,wBAAuDJ,EAASG,OAAOE,WAChFb,OAAQ,CAACQ,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,gBAGvD,SAAAC,GAAK,OAAIL,QAAQC,IAAII,EAAMC,WAC3B,CAAEC,oBAAoB,EAAMC,QAAS,IAAOC,WAAY,QAMxD,mBACA,yBAAKC,cAAY,OACf,kBAACC,EAAA,EAAD,CAAKpB,OAAQC,EAAMD,OAAQqB,KAAM,IAC/B,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CAAQjB,SAAUP,EAAMD,QACtB,kBAAC0B,EAAA,EAAD,KAAQzB,EAAMF,gBCPX4B,EAtCE,WAAO,IAAD,EACe7B,mBAAS,UADxB,mBACd8B,EADc,KACFC,EADE,KAEfC,EAAkB,SAACC,EAAD,GAAkB,IAAZC,EAAW,EAAXA,KAC5BH,EAAcG,IAGhB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMd,cAAY,WAAWe,SAAS,MAAMC,SAAO,GACjD,kBAACF,EAAA,EAAKG,KAAN,CAAWJ,KAAK,SAASK,OAAuB,WAAfT,EAAyBxB,QAAS0B,IACnE,kBAACG,EAAA,EAAKG,KAAN,CACEJ,KAAK,cACLK,OAAuB,gBAAfT,EACRxB,QAAS0B,IAEX,kBAACG,EAAA,EAAKG,KAAN,CAAWJ,KAAK,SAASK,OAAuB,WAAfT,EAAyBxB,QAAS0B,IACnE,kBAACG,EAAA,EAAKG,KAAN,CACEJ,KAAK,gBACLK,OAAuB,kBAAfT,EACRxB,QAAS0B,KAIb,kBAACQ,EAAA,EAAD,CAASJ,SAAS,UACA,WAAfN,GAA2B,SACZ,gBAAfA,GACC,2CAEE,kBAAC,EAAD,OAGY,WAAfA,GAA2B,SACZ,kBAAfA,GAAkC,mBCZ5BW,MAjBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKrB,cAAY,uBACf,yBAAKsB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,gJAKF,kBAAC,EAAD,QCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ec8ebc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport L from \"leaflet\";\r\nimport \"./Geolocation.css\";\r\nimport iconRetinaUrl from \"leaflet/dist/images/marker-icon-2x.png\";\r\nimport iconUrl from \"leaflet/dist/images/marker-icon.png\";\r\nimport shadowUrl from \"leaflet/dist/images/marker-shadow.png\";\r\n\r\n// https://github.com/PaulLeCam/react-leaflet/issues/453\r\n// eslint-disable-next-line no-underscore-dangle\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl,\r\n  iconUrl,\r\n  shadowUrl\r\n});\r\n\r\nconst Geolocation = () => {\r\n  const [state, setState] = useState({\r\n    popUpText: \"Latitude: 1.2796562, Longitude: 103.8164022\",\r\n    center: [1.2796562, 103.8164022]\r\n  });\r\n\r\n  const getLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        console.log(position);\r\n        setState({\r\n          popUpText: `Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`,\r\n          center: [position.coords.latitude, position.coords.longitude]\r\n        });\r\n      },\r\n      error => console.log(error.message),\r\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={getLocation}>Get My Location</Button>\r\n      <div data-testid=\"map\">\r\n        <Map center={state.center} zoom={15}>\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={state.center}>\r\n            <Popup>{state.popUpText}</Popup>\r\n          </Marker>\r\n        </Map>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Geolocation;\r\n","import React, { useState } from \"react\";\r\nimport { Menu, Segment } from \"semantic-ui-react\";\r\nimport Geolocation from \"./Geolocation/Geolocation\";\r\n\r\nconst Examples = () => {\r\n  const [activeItem, setActiveItem] = useState(\"readme\");\r\n  const handleItemClick = (e, { name }) => {\r\n    setActiveItem(name);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Menu data-testid=\"examples\" attached=\"top\" tabular>\r\n        <Menu.Item name=\"readme\" active={activeItem === \"readme\"} onClick={handleItemClick} />\r\n        <Menu.Item\r\n          name=\"geolocation\"\r\n          active={activeItem === \"geolocation\"}\r\n          onClick={handleItemClick}\r\n        />\r\n        <Menu.Item name=\"camera\" active={activeItem === \"camera\"} onClick={handleItemClick} />\r\n        <Menu.Item\r\n          name=\"notifications\"\r\n          active={activeItem === \"notifications\"}\r\n          onClick={handleItemClick}\r\n        />\r\n      </Menu>\r\n\r\n      <Segment attached=\"bottom\">\r\n        {activeItem === \"readme\" && \"readme\"}\r\n        {activeItem === \"geolocation\" && (\r\n          <div>\r\n            geolocation\r\n            <Geolocation />\r\n          </div>\r\n        )}\r\n        {activeItem === \"camera\" && \"camera\"}\r\n        {activeItem === \"notifications\" && \"notifications\"}\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Examples;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"leaflet-css/dist/leaflet.css\";\nimport Examples from \"./Examples/Examples\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div data-testid=\"rotating-react-icon\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n        <p>\n          This project builds on top of Create-React-App to demonstrate how Web Apps can create\n          native mobile experiences.\n        </p>\n      </header>\n      <Examples />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}