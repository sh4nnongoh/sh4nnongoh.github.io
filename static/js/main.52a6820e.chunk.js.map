{"version":3,"sources":["logo.svg","Geolocation.jsx","Menu.jsx","Examples.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","Geolocation","useState","popUpText","center","state","setState","type","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","log","message","enableHighAccuracy","timeout","maximumAge","data-testid","Map","zoom","minZoom","maxZoom","zoomControl","TileLayer","attribution","url","Marker","Popup","StyledUl","styled","ul","StyledButton","button","StyledSpan","span","Menu","menuItemList","map","item","key","name","toLowerCase","description","defaultProps","StyledNav","nav","StyledDiv","div","Examples","activeItem","setActiveItem","handleMenuItem","className","StyledApp","StyledImg","img","App","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ready","unregister","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.52a6820e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport iconRetinaUrl from \"leaflet/dist/images/marker-icon-2x.png\";\r\nimport iconUrl from \"leaflet/dist/images/marker-icon.png\";\r\nimport shadowUrl from \"leaflet/dist/images/marker-shadow.png\";\r\n\r\n// https://github.com/PaulLeCam/react-leaflet/issues/453\r\n// eslint-disable-next-line no-underscore-dangle\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl,\r\n  iconUrl,\r\n  shadowUrl\r\n});\r\n\r\nconst Geolocation = () => {\r\n  const [state, setState] = useState({\r\n    popUpText: \"Latitude: 1.2796562, Longitude: 103.8164022\",\r\n    center: [1.2796562, 103.8164022]\r\n  });\r\n\r\n  const getLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        setState({\r\n          popUpText: `Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`,\r\n          center: [position.coords.latitude, position.coords.longitude]\r\n        });\r\n      },\r\n      error => console.log(error.message),\r\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button type=\"button\" onClick={getLocation}>\r\n        Get My Location\r\n      </button>\r\n      <div data-testid=\"map\">\r\n        <Map center={state.center} zoom={15} minZoom={15} maxZoom={15} zoomControl={false}>\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={state.center}>\r\n            <Popup>{state.popUpText}</Popup>\r\n          </Marker>\r\n        </Map>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Geolocation;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { string, arrayOf, shape, func } from \"prop-types\";\r\n\r\nconst StyledUl = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  list-style: none;\r\n`;\r\nconst StyledButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  margin: 1rem;\r\n  height: 5rem;\r\n  width: 15rem;\r\n  font-size: 1.6rem;\r\n  max-width: 10rem;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n  display: block;\r\n  align-items: flex-start;\r\n  color: #333;\r\n  &:hover {\r\n    background: #ccc;\r\n    color: purple;\r\n    &:focus {\r\n      color: red;\r\n    }\r\n  }\r\n`;\r\nconst StyledSpan = styled.span`\r\n  display: block;\r\n  font-size: 1rem;\r\n  font-weight: normal;\r\n  color: #888;\r\n  margin: 0.25rem 0 0 0;\r\n  ${StyledButton}:hover & {\r\n    background: white;\r\n  }\r\n`;\r\n\r\nconst Menu = ({ menuItemList }) => {\r\n  return (\r\n    <StyledUl>\r\n      {menuItemList.map(item => (\r\n        <li key={`${item.name}`}>\r\n          <StyledButton onClick={() => item.onClick(item.name.toLowerCase())}>\r\n            {item.name}\r\n            <StyledSpan>{item.description}</StyledSpan>\r\n          </StyledButton>\r\n        </li>\r\n      ))}\r\n    </StyledUl>\r\n  );\r\n};\r\n\r\nMenu.propTypes = {\r\n  menuItemList: arrayOf(\r\n    shape({\r\n      name: string,\r\n      description: string,\r\n      onClick: func\r\n    })\r\n  )\r\n};\r\n\r\nMenu.defaultProps = {\r\n  menuItemList: []\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Geolocation from \"./Geolocation\";\r\nimport Menu from \"./Menu\";\r\n\r\nconst StyledNav = styled.nav`\r\n  background: red;\r\n`;\r\nconst StyledDiv = styled.div`\r\n  background: grey;\r\n  display: block;\r\n`;\r\n\r\nconst Examples = () => {\r\n  const [activeItem, setActiveItem] = useState(\"readme\");\r\n  const handleMenuItem = name => {\r\n    setActiveItem(name);\r\n  };\r\n\r\n  const menuItemList = [\r\n    { onClick: handleMenuItem, name: \"Readme\", description: \"Read this for browser support\" },\r\n    { onClick: handleMenuItem, name: \"Geolocation\", description: \"Pinpoint your current location\" },\r\n    { onClick: handleMenuItem, name: \"Camera\", description: \"Say Cheese! __________\" },\r\n    { onClick: handleMenuItem, name: \"Notifications\", description: \"Triggers a push notification\" }\r\n  ];\r\n\r\n  return (\r\n    <div data-testid=\"examples\" className=\"examples\">\r\n      <StyledDiv>\r\n        {activeItem === \"readme\" && \"readme\"}\r\n        {activeItem === \"geolocation\" && (\r\n          <div>\r\n            geolocation\r\n            <Geolocation />\r\n          </div>\r\n        )}\r\n        {activeItem === \"camera\" && \"camera\"}\r\n        {activeItem === \"notifications\" && \"notifications\"}\r\n      </StyledDiv>\r\n      <StyledNav>\r\n        <Menu menuItemList={menuItemList} />\r\n      </StyledNav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Examples;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport logo from \"./logo.svg\";\n// import \"semantic-ui-css/semantic.min.css\";\nimport \"leaflet-css/dist/leaflet.css\";\nimport Examples from \"./Examples\";\n\nconst StyledApp = styled.div`\n  text-align: center;\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* justify-content: center; */\n  font-size: calc(10px + 2vmin);\n  color: white;\n  .leaflet-container {\n    height: 30rem;\n    width: 100%;\n  }\n`;\nconst StyledImg = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: App-logo-spin infinite 20s linear;\n  }\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst App = () => {\n  return (\n    <div>\n      <StyledApp>\n        <header>\n          <div data-testid=\"rotating-react-icon\">\n            <StyledImg src={logo} alt=\"logo\" />\n          </div>\n          <p>\n            This project builds on top of Create-React-App to demonstrate how Web Apps can create\n            native mobile experiences.\n          </p>\n        </header>\n        <Examples />\n      </StyledApp>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n              console.log(\n                \"Attempting to unregister existing service worker, \" +\n                  \"do refresh page if it doesn't work.\"\n              );\n              unregister();\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}