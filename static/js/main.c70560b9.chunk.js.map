{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","App","useState","location","setLocation","navigator","mediaDevices","getUserMedia","video","then","stream","document","getElementById","srcObject","play","className","src","logo","alt","onClick","geolocation","getCurrentPosition","position","console","log","coords","longitude","latitude","error","message","enableHighAccuracy","timeout","maximumAge","id","width","height","autoplay","getContext","drawImage","href","target","rel","Boolean","window","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,kC,iMC0E5BC,MApEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KA2Bb,OAvBIC,UAAUC,cAAgBD,UAAUC,aAAaC,cAEnDF,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAAQC,MAAK,SAASC,GAEjEC,SAASC,eAAe,SAASC,UAAYH,EAC7CC,SAASC,eAAe,SAASE,UAmBnC,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,gDAAsBf,EAAtB,KACA,4BAAQgB,QAtBM,WAClBd,UAAUe,YAAYC,oBACpB,SAAAC,GAEEC,QAAQC,IAAIF,GACZlB,EAAY,IAAD,OACLkB,EAASG,OAAOC,UADX,aACyBJ,EAASG,OAAOE,SADzC,SAIb,SAAAC,GAAK,OAAIL,QAAQC,IAAII,EAAMC,WAC3B,CAAEC,oBAAoB,EAAMC,QAAS,IAAOC,WAAY,QAYtD,gBACA,2BAAOC,GAAG,QAAQC,MAAM,MAAMC,OAAO,MAAMC,UAAQ,IACnD,4BACEH,GAAG,OACHd,QAAS,WACPR,SACGC,eAAe,UACfyB,WAAW,MACXC,UAAU3B,SAASC,eAAe,SAAU,EAAG,EAAG,IAAK,OAN9D,cAWA,4BAAQqB,GAAG,SAASC,MAAM,MAAMC,OAAO,QACvC,kBAAC,cAAD,KACE,mEAEF,kBAAC,aAAD,KACE,kEAEF,uBACEpB,UAAU,WACVwB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCjDYC,QACW,cAA7BC,OAAOxC,SAASyC,UAEkB,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASC,eAAe,SD6H3C,kBAAmBP,WACrBA,UAAU2C,cAAcC,MAAMxC,MAAK,SAACyC,GAClCA,EAAaC,kB","file":"static/js/main.c70560b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from \"react\";\r\n// import Modernizr from './modernizr';\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { BrowserView, MobileView } from \"react-device-detect\";\r\n\r\nfunction App() {\r\n  const [location, setLocation] = useState(\"\");\r\n\r\n  // Get access to the camera!\r\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n    // Not adding `{ audio: true }` since we only want video now\r\n    navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {\r\n      //video.src = window.URL.createObjectURL(stream);\r\n      document.getElementById(\"video\").srcObject = stream;\r\n      document.getElementById(\"video\").play();\r\n    });\r\n  }\r\n\r\n  const getLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        // const location = JSON.stringify(position.coords);\r\n        console.log(position);\r\n        setLocation(\r\n          `[${position.coords.longitude}, ${position.coords.latitude}]`\r\n        );\r\n      },\r\n      error => console.log(error.message),\r\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p>This is default. ({location})</p>\r\n        <button onClick={getLocation}>Get Location</button>\r\n        <video id=\"video\" width=\"640\" height=\"480\" autoplay></video>\r\n        <button\r\n          id=\"snap\"\r\n          onClick={() => {\r\n            document\r\n              .getElementById(\"canvas\")\r\n              .getContext(\"2d\")\r\n              .drawImage(document.getElementById(\"video\"), 0, 0, 640, 480);\r\n          }}\r\n        >\r\n          Snap Photo\r\n        </button>\r\n        <canvas id=\"canvas\" width=\"640\" height=\"480\"></canvas>\r\n        <BrowserView>\r\n          <h1> This is rendered only in browser </h1>\r\n        </BrowserView>\r\n        <MobileView>\r\n          <h1> This is rendered only on mobile </h1>\r\n        </MobileView>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\"\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === \"[::1]\"\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \"\r\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \"\r\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}